/*
 * Copyright (c) 2016, , EndToEnd and/or its affiliates. All rights reserved.
 * EndToEnd PROPRIETARY/CONFIDENTIAL.Use is subject to license terms.
 */
import org.apache.tools.ant.filters.ReplaceTokens

 buildscript {
 	ext {
		springBootVersion = '1.5.4.RELEASE'
	}

    repositories {
    	mavenCentral()
    	//mavenLocal()
		maven { url "http://repo.springsource.org/plugins-release" }
	}

	dependencies {
     classpath "org.springframework.build.gradle:propdeps-plugin:0.0.5"
     classpath "io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE"
     classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
     classpath "org.liquibase:liquibase-gradle-plugin:1.2.4"
   }
}


configure(allprojects) { project ->
	group                    = "com.propertytrees"
	version 				 = qualifyVersionIfNecessary(version)
    ext.env                  = buildEnvironment()
    ext.springBootVersion    = '1.5.4.RELEASE'
	ext.junitVersion         = "4.11"
	ext.slf4jVersion         = "1.7.5"
	ext.xstreamVersion       = "1.4.6"
	ext.gradleScriptDir      = "${rootProject.projectDir}/gradle"

	apply plugin: "java"
	//apply plugin: "findbugs"
	apply plugin: "propdeps"
	apply plugin: "io.spring.dependency-management"

	apply from  : "${gradleScriptDir}/ide.gradle"
	apply from  : "${gradleScriptDir}/${env}.gradle"

	compileJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:fallthrough",  "-Xlint:-deprecation","-Xlint:unchecked",
		 "-Xlint:-options"
		//, "-Werror" "-Xlint:rawtypes","-Xlint:unchecked",
	]

	compileTestJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
		"-Xlint:-unchecked", "-Xlint:-options"]

	compileJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	compileTestJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

	tasks.withType(Jar) {
        destinationDir = file("$rootDir/build")
        //destinationDir = file("$rootDir/${project.name}/build")
    }

	test {
		systemProperty("java.awt.headless", "true")
		systemProperty("testGroups", project.properties.get("testGroups"))
		scanForTestClasses = false
		include(["**/*Tests.class", "**/*Test.class"])
		// Since we set scanForTestClasses to false, we need to filter out inner
		// classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
		// run MyTests by itself will fail if MyTests contains any inner classes.
		//exclude(["**/Abstract*.class", "**/*$*"])
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencyManagement {
	  imports {
	    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR1'
	  }
	}

	dependencies {
		testCompile "junit:junit:${junitVersion}"
		testCompile "org.hamcrest:hamcrest-all:1.3"
		testCompile "org.mockito:mockito-core:1.9.5"
	}
	
	ext.javadocLinks = [
		"http://docs.oracle.com/javase/7/docs/api/",
		"http://docs.oracle.com/javaee/6/api/",
		"http://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/", // CommonJ
		"http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/topic/com.ibm.websphere.javadoc.doc/web/apidocs/",
		"http://glassfish.java.net/nonav/docs/v3/api/",
		"http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/",
		"http://docs.jboss.org/jbossas/javadoc/7.1.2.Final/",
		"http://commons.apache.org/proper/commons-lang/javadocs/api-2.5/",
		"http://commons.apache.org/proper/commons-codec/apidocs/",
		"http://commons.apache.org/proper/commons-dbcp/apidocs/",
		"http://portals.apache.org/pluto/portlet-2.0-apidocs/",
		"http://tiles.apache.org/framework/apidocs/",
		"http://aopalliance.sourceforge.net/doc/",
		"http://www.eclipse.org/aspectj/doc/released/aspectj5rt-api/",
		"http://ehcache.org/apidocs/",
		"http://quartz-scheduler.org/api/2.1.7/",
		"http://jackson.codehaus.org/1.9.4/javadoc/",
		"http://fasterxml.github.com/jackson-core/javadoc/2.3.0/",
		"http://fasterxml.github.com/jackson-databind/javadoc/2.3.0/",
		"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs"
	] as String[]
}

/*findbugs {
    toolVersion = "2.0.1"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "high"
    visitors = ["FindSqlInjection", "SwitchFallthrough"]
    omitVisitors = ["FindNonShortCircuit"]
    includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
    excludeBugsFilter = file("$rootProject.projectDir/config/findbugs/excludeBugsFilter.xml")
}*/

project(":propertytrees-gateway"){
	description = "propertytrees gateway"
    apply plugin: "org.springframework.boot"
    springBoot {
	    executable = true
    }
   
    dependencies {
	    compile "org.springframework.cloud:spring-cloud-starter-zuul"
    }
}

project(":propertytrees-common"){
	description = "propertytrees common"

	dependencies {
	   compile "com.fasterxml.jackson.core:jackson-annotations:2.8.1"
	   compile "com.fasterxml.jackson.core:jackson-core:2.8.1"
	   compile "com.fasterxml.jackson.core:jackson-databind:2.8.1"
	   compile "org.apache.commons:commons-collections4:4.1"
	   compile "org.apache.commons:commons-lang3:3.4"
       compile "org.apache.commons:commons-io:1.3.2"
       compile "commons-beanutils:commons-beanutils:1.9.2"

       compile 'com.querydsl:querydsl-jpa:4.1.4'
       compile 'com.querydsl:querydsl-apt:4.1.4'
       compile "org.reflections:reflections-spring:0.9.9-RC1"
	   compile "org.springframework.cloud:spring-cloud-starter-feign"
	   compile "org.springframework.cloud:spring-cloud-starter-hystrix"
   	   compile "org.springframework.cloud:spring-cloud-starter-zuul"
   	   compile "org.springframework.cloud:spring-cloud-starter-eureka"
   	   compile "org.springframework.cloud:spring-cloud-config-client"
   	   compile "org.hibernate:hibernate-search-orm:5.6.1.Final"
	   provided "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	   provided "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
       provided "javax.servlet:javax.servlet-api:3.1.0"
    }
    
    sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
          }
      }
   }

	configurations {
	    querydslapt
	}
	
	task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
	    source = sourceSets.main.java
	    classpath = configurations.compile + configurations.querydslapt
	    options.compilerArgs = [
	            "-proc:only",
	            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
	    ]
	    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
	}
	
	compileJava {
	    dependsOn generateQueryDSL
	    source generateQueryDSL.destinationDir
	}
	
	compileGeneratedJava {
	    dependsOn generateQueryDSL
	    options.warnings = false
	    classpath += sourceSets.main.runtimeClasspath
	}
	
	clean {
	    delete sourceSets.generated.java.srcDirs
	}
}

project(":propertytrees-service") {
	description = "propertytrees Service"
	subprojects{
	   apply plugin: "org.springframework.boot"
	   springBoot {
		    executable = true
	   }
	   
	   dependencies {
		compile(project(":propertytrees-common"))
	    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE"
		compile "org.postgresql:postgresql:42.1.1"
		compile "org.liquibase:liquibase-core:3.5.3"
	   }
	}
}

project(":propertytrees-service:admin-service") {
	description = "Admin Service"
}

project(":propertytrees-ui") {
	description = "propertytrees ui"
	subprojects{
		apply plugin: "org.springframework.boot"
		springBoot {
		    executable = true
		}
	    dependencies {
           compile "org.springframework:spring-aspects"
	       compile "org.apache.httpcomponents:httpclient"
     	   compile "org.springframework.boot:spring-boot-starter-web"
   	       compile "org.springframework.boot:spring-boot-starter-cache"
	   }
	   evaluationDependsOnChildren();
	   tasks.withType(JavaCompile){ options.warnings = false }
   }
}

project(":propertytrees-ui:propertytrees-ui-frontend") {
   description = "propertytrees ui frontend"
   jar {
	 from('angularjs-2/dist') {
		//static is a default supported Spring Boot resources directory.
		into 'static' }
  }
  //angularjs-2:build will be run before the processResources
  processResources.dependsOn(':propertytrees-ui:propertytrees-ui-frontend:angularjs-2:build')		
}

project(":propertytrees-ui:propertytrees-ui-admin") {
  description = "propertytrees ui admin"
  jar {
	 from('angularjs-5/dist') {
		//static is a default supported Spring Boot resources directory.
		into 'static' 
	}
  }
  //angularjs-5:build will be run before the processResources
  processResources.dependsOn(':propertytrees-ui:propertytrees-ui-admin:angularjs-5:build')		
}

def buildEnvironment() {
  def env=System.getProperty("propertytrees.build.profile")!=null
                   ? System.getProperty("propertytrees.build.profile")
                   :System.getenv("propertytrees_BUILD_PROFILE")
  return env!=null?env:"dev"
}


/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */
def qualifyVersionIfNecessary(version) {
	if (rootProject.hasProperty('PROJECT_VERSION')) {
		return  rootProject.getProperty('PROJECT_VERSION')
	}
	return version
}


